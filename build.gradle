buildscript {
    repositories {
        maven { url = 'https://maven.minecraftforge.net' }
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
    }
}
apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'eclipse'
apply plugin: 'maven-publish'

version = '1.0'
group = 'com.github.gisellevonbingen.myfirstmod'
archivesBaseName = 'myfirstmod'

java.toolchain.languageVersion = JavaLanguageVersion.of(8) // Mojang ships Java 8 to end users, so your mod should target Java 8.

println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))
minecraft {
    mappings channel: 'official', version: '1.16.5'

    runs {
        client {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'

            mods {
                myfirstmod {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'

            mods {
                myfirstmod {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            args '--mod', 'myfirstmod', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                myfirstmod {
                    source sourceSets.main
                }
            }
        }
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
	maven {
		name "JEI"
		url "https://dvs1.progwml6.com/files/maven"
	}
	maven {
		name "Mekanism"
		url "https://modmaven.dev"
	}
	maven {
		name "RS"
		url "https://repo.refinedmods.com"
	}
	maven {
		name "Local"
		url uri("${projectDir}/libs")
	}
	
}
	
dependencies {
    minecraft 'net.minecraftforge:forge:1.16.5-36.2.2'
	
	// JEI
    compileOnly fg.deobf("mezz.jei:jei-${mezz_jei_version}:api")
    runtimeOnly fg.deobf("mezz.jei:jei-${mezz_jei_version}")
	
	// Mekanism
    compileOnly "mekanism:Mekanism:${mekanism_version}:api"
    runtimeOnly fg.deobf("mekanism:Mekanism:${mekanism_version}")				// core
    runtimeOnly fg.deobf("mekanism:Mekanism:${mekanism_version}:additions")	// Mekanism: Additions
    runtimeOnly fg.deobf("mekanism:Mekanism:${mekanism_version}:generators")// Mekanism: Generators
    runtimeOnly fg.deobf("mekanism:Mekanism:${mekanism_version}:tools")		// Mekanism: Tools
	
	// RS
    compileOnly fg.deobf("com.refinedmods:refinedstorage:${refinedmods_rs_version}:api")
    runtimeOnly fg.deobf("com.refinedmods:refinedstorage:${refinedmods_rs_version}")
    
    // TCon
    compileOnly fg.deobf("com.github.SlimeKnights:Mantle:${slimeknights_mantle_version}")
    runtimeOnly fg.deobf("com.github.SlimeKnights:Mantle:${slimeknights_mantle_version}")
    compileOnly fg.deobf("com.github.SlimeKnights:TinkersConstruct:${slimeknights_tcon_version}")
    runtimeOnly fg.deobf("com.github.SlimeKnights:TinkersConstruct:${slimeknights_tcon_version}")
    
    // CoFH
    compileOnly fg.deobf("com.github.CoFH:CoFHCore:${cofh_core_version}")
    runtimeOnly fg.deobf("com.github.CoFH:CoFHCore:${cofh_core_version}")
    compileOnly fg.deobf("com.github.CoFH:ThermalFoundation:${cofh_thermalfoundation_version}")
    runtimeOnly fg.deobf("com.github.CoFH:ThermalFoundation:${cofh_thermalfoundation_version}")
}

jar {
    manifest {
        attributes([
            "Specification-Title": "myfirstmod",
            "Specification-Vendor": "gisellevonbingen",
            "Specification-Version": "1",
            "Implementation-Title": project.name,
            "Implementation-Version": "${version}",
            "Implementation-Vendor" :"gisellevonbingen",
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

jar.finalizedBy('reobfJar') 
// However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing
//publish.dependsOn('reobfJar')

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file:///${project.projectDir}/mcmodsrepo"
        }
    }
}
